package centralApplication;

import java.io.Serializable;
import java.util.ArrayList;

public class Department implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1212195773920642415L;
	private int id_Department;
	private String name_Department;
	private ArrayList<Worker> Worker_List = new ArrayList<Worker>();;

	/**
	 * @param id_Department
	 * @param name_Department
	 */
	public Department(int id_Department, String name_Department) {
		this.setId_Department(id_Department);
		this.setName_Department(name_Department);
	}

	@Override
	public String toString() {
		return "Department [id_Department=" + id_Department + ", name_Department=" + name_Department + ", Worker_List="
				+ Worker_List + "]";
	}

	/**
	 * @return the worker_List
	 */
	public ArrayList<Worker> getWorker_List() {
		return Worker_List;
	}

	/**
	 * @param worker_List the worker_List to set
	 */
	public void setWorker_List(ArrayList<Worker> worker_List) {
		Worker_List = worker_List;
	}

	/**
	 * @return the id_Department
	 */
	public int getId_Department() {
		return id_Department;
	}

	/**
	 * @param id_Department the id_Department to set
	 */
	public void setId_Department(int id_Department) {
		this.id_Department = id_Department;
	}

	/**
	 * @return the name_Department
	 */
	public String getName_Department() {
		return name_Department;
	}

	/**
	 * @param name_Department the name_Department to set
	 */
	public void setName_Department(String name_Department) {
		this.name_Department = name_Department;
	}

	/**
	 * @param department_To_Add
	 */
	public void add_Worker(Worker worker_To_Add) {
		this.Worker_List.add(worker_To_Add);
	}

	/**
	 * @param searched_Worker_Id
	 * @return true if searched worker found, else false
	 */
	public boolean isWorkerValidId(int searched_Worker_Id) {
		for (Worker worker : Worker_List) {
			int current_Worker_Id = worker.getId_Worker();
			if (current_Worker_Id == searched_Worker_Id)
				return true;
		}
		return false;
	}

	public Worker getWorkerById(int searched_Worker_Id) throws Exception {
		for (Worker worker : Worker_List) {
			int current_Worker_Id = worker.getId_Worker();
			if (current_Worker_Id == searched_Worker_Id)
				return worker;
		}
		throw new Exception("Error Search: Worker Not Found");

	}

	public void showEveryWorkerFirstName() {
		for (Worker worker : Worker_List) {
			String current_Worker_Firstname = worker.getFirstname_Worker();
			System.out.println(current_Worker_Firstname);
		}
	}

	/**
	 * @param searched_Worker_Firstname
	 * @param searched_Worker_Lastname
	 * @return true if searched worker found, else false
	 */
	public boolean isWorkerValidName(String searched_Worker_Firstname, String searched_Worker_Lastname) {
		for (Worker worker : Worker_List) {
			String current_Worker_Firstname = worker.getFirstname_Worker();
			String current_Worker_Lastname = worker.getLastname_Worker();
			if ((current_Worker_Firstname.equals(searched_Worker_Firstname))
					&& (current_Worker_Lastname.equals(searched_Worker_Lastname)))
				return true;
		}
		return false;
	}

	public Worker getWorkerByName(String searched_Worker_Firstname, String searched_Worker_Lastname) throws Exception {
		for (Worker worker : Worker_List) {
			String current_Worker_Firstname = worker.getFirstname_Worker();
			String current_Worker_Lastname = worker.getLastname_Worker();
			if ((current_Worker_Firstname.equals(searched_Worker_Firstname))
					&& (current_Worker_Lastname.equals(searched_Worker_Lastname)))
				return worker;
		}
		throw new Exception("Error Search: Worker Not Found");
	}

	public void deleteWorker(Worker workerToDelete) {
		for (Worker worker : Worker_List) {
			String current_Worker_Firstname = worker.getFirstname_Worker();
			String current_Worker_Lastname = worker.getLastname_Worker();
			if ((current_Worker_Firstname.equals(workerToDelete.getFirstname_Worker()))
					&& (current_Worker_Lastname.equals(workerToDelete.getFirstname_Worker()))
							&& (worker.getId_Worker() == workerToDelete.getId_Worker())) {
				break;
			}
				
		}
		throw new Exception("Error Search: Worker Not Found");
	}

}
